name: Build and Publish to PyPI

on:
  push:
    tags:
      - 'v*'  # Trigger on version tags like v1.0.0
  workflow_dispatch:  # Allow manual triggering
    inputs:
      publish_to_pypi:
        description: 'Publish to PyPI'
        required: true
        default: 'false'
        type: choice
        options:
          - 'true'
          - 'false'

jobs:
  test:
    name: Test Package
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: uv sync --all-extras
    
    - name: Run tests
      run: |
        uv run python tests/test_server.py
        uv run python tests/test_auth.py
        uv run python tests/test_startup.py
    
    - name: Test package build
      run: uv build
    
    - name: Test package installation
      shell: bash
      run: |
        WHEEL_FILE=$(ls dist/*.whl)
        uv pip install "$WHEEL_FILE"
        uv pip show league-analysis-mcp-server
        echo "Testing package import..."
        uv run python -c "import league_analysis_mcp_server; print('Package imported successfully')"

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    outputs:
      version: ${{ steps.extract-version.outputs.version }}
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version tags
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Set up Python
      run: uv python install 3.11
    
    - name: Install build dependencies
      run: uv sync
    
    - name: Extract version
      id: extract-version
      shell: bash
      run: |
        VERSION=$(uv run python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Extracted version: $VERSION"
    
    - name: Build package
      run: uv build
    
    - name: Verify build
      shell: bash
      run: |
        ls -la dist/
        WHEEL_FILE=$(ls dist/*.whl)
        uv pip install "$WHEEL_FILE"
        uv pip show league-analysis-mcp-server
        echo "Testing package import..."
        uv run python -c "import league_analysis_mcp_server; print('Built package works!')"
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.publish_to_pypi == 'true')
    permissions:
      contents: write  # Required for creating GitHub releases
      id-token: write  # For trusted publishing
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
    
    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"
    
    - name: Publish to PyPI
      env:
        UV_PUBLISH_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
      run: uv publish

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build, publish-pypi]
    if: needs.publish-pypi.result == 'success'
    permissions:
      contents: write  # Required for creating GitHub releases
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist-files
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ startsWith(github.ref, 'refs/tags/v') && github.ref_name || format('v{0}', needs.build.outputs.version) }}
        name: ${{ startsWith(github.ref, 'refs/tags/v') && format('Release {0}', github.ref_name) || format('Release v{0}', needs.build.outputs.version) }}
        body: |
          ## Changes in this release
          
          Version: `${{ needs.build.outputs.version }}`
          
          Install with: `uvx league-analysis-mcp-server` or `pip install league-analysis-mcp-server`
          
          See the [changelog](CHANGELOG.md) for details.
        files: |
          dist/*
        draft: false
        prerelease: false