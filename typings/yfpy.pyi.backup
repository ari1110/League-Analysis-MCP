# Type stubs for yfpy
from typing import Any, Dict, List, Optional, Union, Iterator

class Data:
    def __init__(self, *args: Any, **kwargs: Any) -> None: ...
    def __getattr__(self, name: str) -> Any: ...
    def __setattr__(self, name: str, value: Any) -> None: ...
    def __iter__(self) -> Iterator[Any]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, key: Any) -> Any: ...

class YahooFantasySportsQuery:
    def __init__(self, 
                 auth_dir: Optional[str] = None,
                 league_id: Optional[str] = None,
                 game_id: Optional[Union[str, int]] = None,
                 game_code: Optional[str] = None,
                 offline: Optional[bool] = None,
                 all_output_as_json: Optional[bool] = None,
                 consumer_key: Optional[str] = None,
                 consumer_secret: Optional[str] = None,
                 browser_callback: Optional[bool] = None,
                 env_file_location: Optional[str] = None,
                 save_token_data_to_env_file: Optional[bool] = None,
                 **kwargs: Any) -> None: ...
    
    def get_current_user(self) -> Data: ...
    def get_user_games(self) -> Data: ...
    def get_user_leagues_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def get_league_info(self) -> Data: ...
    def get_league_metadata(self) -> Data: ...
    def get_league_settings(self) -> Data: ...
    def get_league_standings(self) -> Data: ...
    def get_league_teams(self) -> Data: ...
    def get_league_players(self, status: Optional[str] = None, 
                          position: Optional[str] = None, 
                          start: Optional[int] = None,
                          count: Optional[int] = None) -> Data: ...
    def get_league_draft_results(self) -> Data: ...
    def get_league_transactions(self, transaction_types: Optional[str] = None,
                               count: Optional[int] = None) -> Data: ...
    def get_league_scoreboard_by_week(self, chosen_week: Union[str, int]) -> Data: ...
    def get_league_matchups_by_week(self, chosen_week: Union[str, int]) -> Data: ...
    def get_team_info(self, team_id: Union[str, int]) -> Data: ...
    def get_team_metadata(self, team_id: Union[str, int]) -> Data: ...
    def get_team_stats(self, team_id: Union[str, int]) -> Data: ...
    def get_team_standings(self, team_id: Union[str, int]) -> Data: ...
    def get_team_roster_by_week(self, team_id: Union[str, int], 
                               chosen_week: Union[str, int]) -> Data: ...
    def get_team_roster_player_info_by_week(self, team_id: Union[str, int],
                                          chosen_week: Union[str, int]) -> Data: ...
    def get_team_roster_player_stats(self, team_id: Union[str, int]) -> Data: ...
    def get_team_roster_player_stats_by_week(self, team_id: Union[str, int],
                                           chosen_week: Union[str, int]) -> Data: ...
    def get_team_draft_results(self, team_id: Union[str, int]) -> Data: ...
    def get_team_matchups(self, team_id: Union[str, int]) -> Data: ...
    def get_player_stats_for_season(self, player_key: str,
                                   req_type: Optional[str] = None) -> Data: ...
    def get_player_stats_by_week(self, player_key: str, 
                                chosen_week: Union[str, int],
                                req_type: Optional[str] = None) -> Data: ...
    def get_player_stats_by_date(self, player_key: str,
                                chosen_date: str,
                                req_type: Optional[str] = None) -> Data: ...
    def get_player_ownership(self, player_key: str) -> Data: ...
    def get_player_percent_owned_by_week(self, player_key: str,
                                        chosen_week: Union[str, int]) -> Data: ...
    def get_player_draft_analysis(self, player_key: str) -> Data: ...
    def get_current_game_info(self) -> Data: ...
    def get_current_game_weeks(self) -> Data: ...
    def get_game_info_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def get_game_weeks_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def get_game_stat_categories_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def get_game_position_types_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def get_game_roster_positions_by_game_id(self, game_id: Union[str, int]) -> Data: ...
    def __getattr__(self, name: str) -> Any: ...